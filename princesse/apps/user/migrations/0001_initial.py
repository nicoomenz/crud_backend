# Generated by Django 5.1.5 on 2025-01-15 15:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClientPayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dni', models.CharField(max_length=10, verbose_name='DNI')),
                ('cuit', models.CharField(blank=True, max_length=15, null=True, verbose_name='CUIT')),
                ('first_name', models.CharField(max_length=30, verbose_name='Nombre')),
                ('last_name', models.CharField(max_length=30, verbose_name='Apellido')),
                ('direccion', models.CharField(default='', max_length=100, verbose_name='Direccion')),
                ('email', models.EmailField(max_length=254, verbose_name='Direccion de email')),
                ('phone', models.CharField(blank=True, max_length=25, null=True, verbose_name='Telefono')),
                ('iva', models.CharField(blank=True, choices=[('RESPONSABLE_INSCRIPTO', 'RESPONSABLE INSCRIPTO'), ('NO_RESPONSABLE', 'NO RESPONSABLE'), ('MONOTRIBUTISTA', 'MONOTRIBUTISTA'), ('EXENTO', 'EXENTO'), ('CONSUMIDOR_FINAL', 'CONSUMIDOR FINAL')], default='RESPONSABLE_INSCRIPTO', max_length=30, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Client Payer',
                'verbose_name_plural': 'Clients Payer',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=100, verbose_name='Nombre')),
                ('last_name', models.CharField(max_length=100, verbose_name='Apellido')),
                ('email', models.EmailField(max_length=254, verbose_name='Direccion de email')),
                ('phone', models.CharField(max_length=25, verbose_name='Telefono')),
                ('change_password', models.BooleanField(default=False, verbose_name='Cambiar password')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
